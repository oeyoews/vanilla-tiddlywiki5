created: 20220331025209998
creator: @oeyoews
modified: 20220522075843551
modifier: oeyoews
tags: temp
title: Cryptology
type: text/vnd.tiddlywiki

<<shield status ing green>> updated by [[oeyoews]] <$view field="modified" format="relativedate"/>


!! temp

https://www.oscca.gov.cn/sca/xxgk/2010-12/17/1002389/files/302a3ada057c4a73830536d03e683110.pdf

https://www.oscca.gov.cn/sca/xxgk/2010-12/17/content_1002389.shtml

量子是一种物理学概念，是一种存在状态，而不是存在本身。
https://zhuanlan.zhihu.com/p/129692191

http://www.mathmagic.cn/bbs/read.php?tid=2407
https://wikichi.icu/wiki/Index_of_cryptography_articles#B
https://tuping.vip/archives/46.html

!! todo

!! details

加密算法首先分为两种：单向加密、双向加密。

单向加密是不可逆的，也就是只能加密，不能解密。通常用来传输类似用户名和密码，直接将加密后的数据提交到后台，因为后台不需要知道用户名和密码，可以直接将收到的加密后的数据存储到数据库。

单向散列算法，又称hash函数（杂凑函数，或者杂凑算法）(图像的恢复？)

双向加密算法通常分为 对称性加密算法和 非对称性加密算法，对于对称性加密算法，信息接收双方都需事先知道密匙和加解密算法且其密匙是相同的，之后便是对数据进行 加解密了。非对称算法与之不同，发送双方A,B事先均生成一堆密匙，然后A将自己的公有密匙发送给B，B将自己的公有密匙发送给A，如果A要给B发送消 息，则先需要用B的公有密匙进行消息加密，然后发送给B端，此时B端再用自己的私有密匙进行消息解密，B向A发送消息时为同样的道理。

常量的初始化：
这些常量的作用是和数据源进行计算，增加数据的加密性，那么同学可以想一下，如果常量是一些如：1，2，3之类的整数，是不是就没什么加密可言了，所以需要这些常量很复杂，生成的规则是：对自然数中前8个(或64个)质数（2,3,5,7,11,13,17,19）的平方根的小数部分取前32bit。（在后面的映射的过程中会用到这些常量）

* https://blog.csdn.net/sqc3375177/article/details/82085276
例如：，2的平方根的小数部分约为0.414213562373095048，然后0.414213562373095048≈6∗16^−1+a∗16^−2+0∗16^−3+...

所以2的平方根的小数部分取前32bit就得到：0x6a09e667

* SHA是一系列的加密算法，有SHA-1、SHA-2、SHA-3三大类，而SHA-1已经被破解，SHA-3应用较少，目前应用广泛相对安全的是SHA-2算法，这也是本篇文章重点讲述的算法

* 上篇文章介绍了MD5的算法，和SHA有相似的地方，主流程分三大模块：常量的初始化、信息预处理、使用到的逻辑运算。

 
* 哈希算法的一个重要功能是产生独特的散列，当两个不同的值或文件可以产生相同的散列，则称碰撞。(类比生日问题中的两个人的生日相同情况), 一个哈希位有0和1两个可能值。则每一个独立的哈希值通过位的可能值的数量对于SHA-256，有2的256次方种组合，这是一个庞大的数值。哈希值越大，碰撞的机率就越小。每个散列算法，包括安全算法，都会发生碰撞。而SHA-1的大小结构发生碰撞的机率比较大，所以SHA-1被认为是不安全的。

* 该算法的思想是接收一段明文，然后以一种不可逆的方式将它转换成一段密文，也可以简单的理解为取一串输入码，并把它们转化为长度较短、位数固定的输出序列即散列值的过程
* 是对称的吗
	* 对称加密算法 和 非对称加密算法 具体
* 不可逆性 ？？？ test
* 设备问题
* <<sticky "record video for presentation">>

* https://www.man7.org/linux/man-pages/man1/ssh-keygen.1.html
https://blog.csdn.net/u012391423/article/details/117049335

!! http and https

!! sha256(sha-1 算法标准的继承者 sha-2)

* add vidoe content
* 简述sha256加密的大致过程
> 使用问句的格式 作为标题

> 只是碰撞，谈不上破解，王小云的成就是找到了MD5迅速碰撞的方法，这是个巨大的进步，对数学和加密学都有很大的价值，但距离实用价值还有很大距离
 王晓云的成就是快速找到另外一个报文，跟原始信息报文哈希值相同。这是哈希函数最不愿看到的，突破了MD5这类早期哈希函数的设计初衷。仅此一点就让MD这类早期哈希函数失去信任基础

> 其实，哈希函数本质上就是把无限的信息映射到有限的空间中。无论摘要用多少个比特存储，终究是有限的。那么就必然存在碰撞的情况。所以，哈希算法的安全性，其实就在于人为制造碰撞的难易程度了。
* 
* --- Re: Major Meltdown   出现严重的崩溃If SHA-256 became completely broken, I think we could come to some agreement about what the honest block chain was before the trouble started, lock that in and continue from there with a new hash function

* 量子的出现在挖矿上比现有GPU、ASIC等等没有什么优势！ ???

* 如果你能倒推SHA256的话，说明你能快速挖矿。毕竟挖矿的本质就是暴力计算哈希值。???
当然，也有一说量子计算机将会是比特币的终结者。不过在上一年的“Supercomputing Conference 2019”上，几个计算机领域的行业巨头就已表明，“量子计算机目前并没有太大的实用价值，它现在的技术水平跟10年前并无太大差别”。更重要的量子计算机在硬件层面上恐怕难以再取得突破了，这也是哥本哈根诠释存在的问题。

它其实就是一种哈希函数（散列算法），它能将任意长度的数据或是消息压缩成比较短且固定长度的消息摘要，该数据会被混合打乱，并重新组建一个散列值（哈希值）的指纹。

刚开始公布的时候， 对sha的正义比较大，毕竟发生过lengjiangshijian, 不是很相信nsa美国国家安全局， 不过经过时间的检验， 至少在目前看来是比较安全的

16个二进制位的哈希值，产生碰撞的可能性为1/65536，也就是说如果有65537名用户，就一定会产生碰撞。同理，哈希值扩大到32个二进制位，碰撞的可能性就骤降为1/4294967296。当哈希值扩大到256个二进制位时，发生碰撞的可能性几乎为零。而如果有一天SHA256真的被破解，那世界上很多信任将不复存在。(碰撞攻击， 生日问题)

hash 函数的安全性
SHA	Secure Hash Algorithm	安全散列算法 

* sha256 的运算原理和计算过程十分复杂, 使用go 简单模拟一下
* 本次讲解的主要围绕着一句话： 以目前目前的计算机水平不可能破解sha256(detail)
* sha系列算法大致概述

* MD4, MD5, HAVAL-128、RIPEMD和SHA-1均已被证实存在上面的漏洞，即能够找到不同消息产生相同的散列值，即产生Hash碰撞。

* SHA256中用到两种常量：
8个哈希初值=>自然数中前8个质数（2,3,5,7,11,13,17,19）的平方根的小数部分取前32bit ：
h0 := 0x6a09e667 h1 := 0xbb67ae85 h2 := 0x3c6ef372 h3 := 0xa54ff53a h4 := 0x510e527f h5 := 0x9b05688c h6 := 0x1f83d9ab h7 := 0x5be0cd19

64个哈希常量=>自然数中前64个质数(2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97…)的立方根的小数部分取前32bit 

* 密码破解往往需要研究很复杂的算法， xxx 王小云 md5,比如被王小云破解的MD5和SHA1都是对碰撞攻击的破解，而仍旧很难做到原像或者次原像攻击，也正是因此MD5仍旧可以用作数据完整性验证。  但是今天没有令人头疼的算法介绍（至少对于现在的我来说）， 随着人们对个人隐私的更加关心， 数据的加密愈发受到人们的关注， 今天的重点是了解sha256的安全性究竟有多高
* 书上rsa有讲到rsa的安全性, 破解苏需要的时间和成本随之科技的发展，越来越低
* 算法不重要, 书上没有讲解到sha， 模拟其难度
* 提出问题： 使用sha256进行挖矿(可能你就是挖矿最厉害的那个人），比特币本身使用的是ecc， 破解sha256, 和破解私钥是两回事
* 数据校验（应用）

* https://www.zhihu.com/question/19743262
* https://zhuanlan.zhihu.com/p/49435564
* https://www.jiamisoft.com/blog/21631-sha2.html#:~:text=SHA-256%E7%9A%84%E5%AE%89%E5%85%A8%E6%80%A7%20Hash%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%89%E5%85%A8%E6%80%A7%E5%BE%88%E5%A4%A7%E7%A8%8B%E5%BA%A6%E4%B8%8A%E5%8F%96%E5%86%B3%E4%BA%8E%E6%8A%97%E5%BC%BA%E7%A2%B0%E6%92%9E%E7%9A%84%E8%83%BD%E5%8A%9B%EF%BC%8C%E5%8D%B3%E6%94%BB%E5%87%BB%E8%80%85%E6%89%BE%E5%87%BA%E4%B8%A4%E4%B8%AA%E6%B6%93%E6%81%AFM%E5%92%8CM%20t%20M%E2%89%A0M,t%20%EF%BC%8C%E4%BD%BF%E5%BE%97H%20%28M%29%3DHM%20t%2C%E5%9B%A0%E6%AD%A4%EF%BC%8C%E8%AF%84%E4%BB%B7%E4%B8%80%E4%B8%AAHash%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%89%E5%85%A8%E6%80%A7%EF%BC%8C%E5%B0%B1%E6%98%AF%E7%9C%8B%E6%94%BB%E5%87%BB%E8%80%85%E5%9C%A8%E7%8E%B0%E6%9C%89%E7%9A%84%E6%9D%A1%E4%BB%B6%E4%B8%8B%EF%BC%8C%E6%98%AF%E5%90%A6%E5%8F%AF%E4%BB%A5%E6%89%BE%E5%88%B0%E8%AF%A5%E5%87%BD%E6%95%B0%E7%9A%84%E4%B8%80%E5%AF%B9%E7%A2%B0%E6%92%9E%E3%80%82

!! scratch

[[cryptionscratch]]
!! Links

* [[cnki|https://kns.cnki.net/KXReader/Detail?invoice=txSEAmQWOOpH9hAZfrl1jnxEv%2F1EAyqWI0GBBShUTbiZCnvZmTLEJ69WiHEE6bJB2R0eDTGbMHkKZ%2Fv2HVsonbcZt%2BM%2BOpOBP%2BsbrOnirUSiGU3%2F1U8MkiRnLFgOSI9qStkG12QJg8%2F%2BOI0yMmOg4Ypy9NBghAbzThTgPCZGLAQ%3D&DBCODE=CJFD&FileName=XNMZ201804010&TABLEName=cjfdlast2018&nonce=CBC08A8125394805A2F9A953D2782622&uid=&TIMESTAMP=1650273821678]]

* [[paper 1|http://www.koovin.com/?a=downloadpdf&id=12719239&file_name=D8BA5DED9234620A3B088117350916D2&doaction=readding]]
* https://slidesplayer.com/slide/15463798/
* [[link 1 |http://www.xinhuanet.com/politics/2019-12/27/c_1125394020.htm ]]

* [[link 2|https://www.36kr.com/p/1722609451009]]

* [[LINK|http://manyushijia.com/news/show-72494.html]]
* [[link 3|https://github.com/Glimis/cryptography]]
* [[link|https://www.tashuo.cc/okex/5817.html]]
---
* `量子加密`
